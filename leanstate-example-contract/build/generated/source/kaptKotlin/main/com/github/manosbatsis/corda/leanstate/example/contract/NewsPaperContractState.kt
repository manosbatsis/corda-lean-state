// ------------------------ DO NOT EDIT -----------------------
//  This file is automatically generated by Corda LeanState,
//  see https://manosbatsis.github.io/corda-lean-state
// -------------------------------------------------------------
// ----------------------------------------------------
// Annotation Processing Info
// ----------------------------------------------------
// Annotation: com.github.manosbatsis.corda.leanstate.annotation.LeanStateModel
// Source Elements
//    Primary:   com.github.manosbatsis.corda.leanstate.example.contract.NewsPaperContract.NewsPaper
//    Secondary: none
//    Mixin:     none
// Generator Strategies
//    Main:    ContractStateStrategy
//    Name:    com.github.manosbatsis.corda.leanstate.processor.state.contract.ContractStateNameStrategy
//    Type:    com.github.manosbatsis.corda.leanstate.processor.state.contract.ContractStateTypeStrategy
//    Members: com.github.manosbatsis.corda.leanstate.processor.state.contract.ContractStateMembersStrategy
// ----------------------------------------------------
//
package com.github.manosbatsis.corda.leanstate.example.contract

import com.github.manosbatsis.corda.leanstate.annotation.ParticipantsState
import java.math.BigDecimal
import java.util.Date
import kotlin.Int
import kotlin.String
import kotlin.collections.Iterable
import kotlin.collections.List
import net.corda.core.contracts.BelongsToContract
import net.corda.core.contracts.LinearState
import net.corda.core.contracts.UniqueIdentifier
import net.corda.core.identity.AbstractParty
import net.corda.core.identity.Party
import net.corda.core.schemas.MappedSchema
import net.corda.core.schemas.QueryableState

/**
 * Generated [ContractState] based on [NewsPaperContract.NewsPaper].
 */
@BelongsToContract(value = NewsPaperContract::class)
data class NewsPaperContractState(
  override val linearId: UniqueIdentifier = UniqueIdentifier(),
  override val publisher: Party? = null,
  override val author: Party,
  override val price: BigDecimal,
  override val editions: Int = 1,
  override val title: String,
  override val published: Date = Date(),
  override val alternativeTitle: String? = null
) : NewsPaperContract.NewsPaper, ParticipantsState, LinearState, QueryableState {
  override val participants: List<AbstractParty>
    get() = toParticipants(publisher,author)

  override fun generateMappedObject(schema: MappedSchema): NewsPaperPersistentState =
      NewsPaperPersistentState(
        linearIdIdString = linearId.id.toString(),
        linearIdId = linearId.id,
        linearIdExternalId = linearId.externalId,
        publisherName = publisher?.name,
        publisherNameString = publisher?.name?.toString(),
        publisherNameCommonName = publisher?.name?.commonName,
        publisherNameOrganisationUnit = publisher?.name?.organisationUnit,
        publisherNameOrganisation = publisher?.name?.organisation,
        publisherNameLocality = publisher?.name?.locality,
        publisherNameState = publisher?.name?.state,
        publisherNameCountry = publisher?.name?.country,
        authorName = author.name,
        authorNameString = author.name.toString(),
        authorNameCommonName = author.name.commonName,
        authorNameOrganisationUnit = author.name.organisationUnit,
        authorNameOrganisation = author.name.organisation,
        authorNameLocality = author.name.locality,
        authorNameState = author.name.state,
        authorNameCountry = author.name.country,
        price = price,
        editions = editions,
        title = title,
        published = published,
        alternativeTitle = alternativeTitle
    )


  override fun supportedSchemas(): Iterable<MappedSchema> = listOf(SchemaV1)
  object Schema

  object SchemaV1 : MappedSchema(Schema::class.java, 1,
      listOf(NewsPaperPersistentState::class.java))
}
